#include <LiquidCrystal.h>
// Definir pin para el sensor
const int sensor    = 26;
int a = 0;
int b = 0;
int c = 0;
// Define Variables usadas en las funciones
double    Distancia            = 0.0;
double    DistanciaPorSegundo  = 0.0;
double    DistanciaTotal       = 0.0;
double    Velocidad            = 0.0;
double    VelocidadMaxima      = 0.0;
double    Velocidad_MPH        = 0.0;
double    VelocidadMaxima_MPH  = 0.0;
double    VelocidadPromedio    = 0.0;
int       Pulsos = 0  ;

typedef enum  {
  ESTADO_INICIAL,
  MENU,
  MEDIR_PULSOS,
  MEDIR_VELOCIDAD,
  MEDIR_DISTANCIA,
  MEDIR_VELOCIDAD_PROMEDIO,
  RELOJ
} Estados;

Estados Estado = ESTADO_INICIAL;

unsigned long tiempoActual = millis();
static unsigned long tiempoPrevioPulsos = 0;
static unsigned long tiempoVelocidadPrevia = 0;
unsigned long tiempoInicial = 0;


// Variables para el manejo de tiempo

const unsigned long intervaloPul = 1000;
const unsigned long intervaloVel = 1500;


// Definición del LCD
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// Pines del teclado
const int keypad_pin = A0;
int keypad_value = 0;
int keypad_value_old = 0;

// Caracteres para los botones
char btn_push;

// Página actual del menú principal
byte mainMenuPage = 1;
byte mainMenuPageOld = 1;

// Número total de páginas del menú principal
const byte mainMenuTotal = 5;

// Variables para la configuración
double diametroRueda = 44; // Valor predeterminado para el diámetro de la rueda
int hora = 12; // Hora predeterminada
int minutos = 0; // Minutos predeterminados

// Variable para llevar un seguimiento del cursor en el eje Y
int cursorY = 1;
int    Revoluciones();
double M_Velocidad(int Pulsos);
double M_Distancia(int Velocidad);
void Menu();
void Configuracion();
void fDistancia();
void fVelocidadprom();
void fVelocidad();
void Reloj();

// Función para el menú principal
void MainMenu() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Menu P.");

  // Mostrar hora actual en el menú principal
  lcd.setCursor(11, 0);
  lcd.print(hora);
  lcd.print(":");
  if (minutos < 10) {
    lcd.print("0");
  }
  lcd.print(minutos);

  // Opciones del menú principal
  switch (mainMenuPage) {
    case 1:
      lcd.setCursor(0, 2);
      lcd.print("> Velocidad");
      break;
    case 2:
      lcd.setCursor(0, 2);
      lcd.print("> Distancia");
      break;
    case 3:
      lcd.setCursor(0, 2);
      lcd.print("> Vel promedio");
      break;
    case 4:
      lcd.setCursor(0, 2);
      lcd.print("> Configuracion");
      break;
    case 5:
      lcd.setCursor(0, 2);
      lcd.print("> Reloj");
      break;
  }
}

// Función para manejar los botones del menú principal
void MainMenuBtn() {
  WaitBtnRelease();

  // Navegación por el menú
  if (btn_push == 'U') {
    mainMenuPage++;
    if (mainMenuPage > mainMenuTotal) {
      mainMenuPage = 1;
    }
  } else if (btn_push == 'D') {
    mainMenuPage--;
    if (mainMenuPage == 0) {
      mainMenuPage = mainMenuTotal;
    }
  }

  // Actualizar la pantalla si la página cambia
  if (mainMenuPage != mainMenuPageOld) {
    MainMenu();
    mainMenuPageOld = mainMenuPage;
  }
}

// Función para leer el teclado
char ReadKeypad() {
  // Valores analógicos para cada botón
  keypad_value = analogRead(keypad_pin);

  if (keypad_value < 100) {
    return 'R'; // Sin botón presionado
  } else if (keypad_value < 200) {
    return 'U'; // Arriba
  } else if (keypad_value < 400) {
    return 'D'; // Abajo
  } else if (keypad_value < 600) {
    return 'L'; // Izquierda (no usado)
  } else if (keypad_value < 800) {
    return 'S'; // Seleccionar
  } else {
    return 'N'; // Valor inválido
  }
}

// Función para esperar que se suelte un botón
void WaitBtnRelease() {
  while (analogRead(keypad_pin) < 800) {
  }
}

void setup() {
  lcd.begin(16, 2);
  MainMenu();
  delay(1000);
  Serial.begin(9600);
  tiempoInicial = millis();
  pinMode(sensor, INPUT);
}

void loop() {
  // Acciones según la página seleccionada
    switch (Estado){
      case ESTADO_INICIAL:
        Configuracion();
        Estado = MENU;
        break;
      case MENU:
         Menu();
        break;
      case MEDIR_DISTANCIA:
        fDistancia();
        break;
      case MEDIR_VELOCIDAD_PROMEDIO:
        fVelocidadprom();
        break;
      case MEDIR_VELOCIDAD:
        fVelocidad();
        break;
      case RELOJ:
        Reloj();
        break;
    }
  }

void Menu(){
  btn_push = ReadKeypad();
    MainMenuBtn();
    // Acciones según la página seleccionada
    if (btn_push == 'S') {
      switch (mainMenuPage) {
        case 1:
          Estado = MEDIR_VELOCIDAD;
          break;
        case 2:
          Estado = MEDIR_DISTANCIA;
          break;
        case 3:
          Estado = MEDIR_VELOCIDAD_PROMEDIO;
          break;
        case 4:
          Estado = ESTADO_INICIAL;
          break;
        case 5:
          Estado = RELOJ;
          break;
      }
    }
  Serial.println(Velocidad);
    delay(10);
}

int Revoluciones() {
  unsigned long tiempoActual = millis();
  unsigned long tiempoTranscurrido = tiempoActual - tiempoPrevioPulsos;

  int presente = digitalRead(sensor);
  static int pasado = 0;
  static int Conteo = 0;
  static int conteo_Maximo = 0;
  static unsigned long tiempoPrevioReduccion = 0;

  // Constante para controlar el intervalo de tiempo para la reducción de conteo_Maximo
  const unsigned long intervaloReduccion = 1000; // Reducir cada 1000 milisegundos (1 segundo)
  // Constante para controlar la velocidad de reducción de conteo_Maximo
  const double factorReduccionConteo = 0.9;

  if (presente == LOW && pasado == HIGH) {
    Conteo++; // Incrementar Conteo solo una vez por pulso
  }
  pasado = presente;

  // Si ha pasado un cierto tiempo desde la última reducción, reducir gradualmente conteo_Maximo
  if (tiempoActual - tiempoPrevioReduccion >= intervaloReduccion) {
    conteo_Maximo *= factorReduccionConteo;
    tiempoPrevioReduccion = tiempoActual;
  }

  // Si ha pasado un cierto tiempo sin contar pulsos, actualizar conteo_Maximo
  if (tiempoTranscurrido >= intervaloPul) {
    if (Conteo > conteo_Maximo) {
      conteo_Maximo = Conteo;
    }

    Conteo = 0; // Reiniciar Conteo después de actualizar conteo_Maximo
    tiempoPrevioPulsos = tiempoActual;
  }
 Serial.print("conteo_Maximo: ");
 Serial.println(conteo_Maximo);
  return conteo_Maximo;

}

double M_Velocidad(int Pulsos) {

    // Calcular las RPM (revoluciones por minuto)
    double rps = (double)Pulsos;
    
    // Calcular la velocidad angular en radianes por segundo
    double velocidadAngular = 2 * 3.141592 * rps;

    // Calcular la velocidad instantánea en metros por segundo

    double Velocidad = ((diametroRueda/100)/2) * velocidadAngular;
    Velocidad *= 3.6;

  return Velocidad; // Devolver la velocidad máxima actualizada
}


double M_Vel_Promedio(double DistanciaTotal) {
  unsigned long tiempoTranscurrido = millis() - tiempoInicial; // Calcular tiempo transcurrido desde el inicio del programa en milisegundos


  double tiempoTranscurridoSegundos = tiempoTranscurrido / 1000.0;// Pasa de milisegundos a segundos


  double VelocidadPromedio = DistanciaTotal / tiempoTranscurridoSegundos;

  return VelocidadPromedio;
}


double M_Distancia(double Velocidad){

  unsigned long tiempoTranscurrido  = millis() - tiempoInicial; // Calcular tiempo transcurrido desde el inicio del programa en milisegundos
  double tiempoTranscurridoSegundos = tiempoTranscurrido / 1000.0;// Pasa de milisegundos a segundos

  Serial.print("Velocidad2: ");
  Serial.println(Velocidad);
  //Hallar distancia en metros
  DistanciaPorSegundo  = Velocidad/3.6;
  Serial.println(DistanciaPorSegundo);
  if (tiempoTranscurrido >= 1000) {
    DistanciaTotal += DistanciaPorSegundo;
    tiempoInicial = millis(); // Reiniciar el tiempo inicial para contar otro segundo
  }
  return DistanciaTotal;
}

double Velocidad_A_MPH(double Velocidad){

Velocidad_MPH = Velocidad * 0.621371;

return Velocidad_MPH;
}

double Velocidad_Maxima_MPH(double VelocidadMaxima){

VelocidadMaxima_MPH = VelocidadMaxima * 0.62137;

return VelocidadMaxima_MPH;
}
void Configuracion() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Configuracion");

  lcd.setCursor(0, 1);
  lcd.print("> Diametro: ");
  lcd.print(diametroRueda);

  while (true) {
    btn_push = ReadKeypad();

    if (btn_push == 'U') {
      diametroRueda++;
      if (diametroRueda > 50) {
        diametroRueda = 0;
        delay(500);
      }
      lcd.setCursor(12, 1);
      lcd.print("   ");
      lcd.setCursor(12, 1);
      lcd.print(diametroRueda);
      delay(500);
    } else if (btn_push == 'D') {
      diametroRueda--;
      if (diametroRueda < 0) {
        diametroRueda = 50;
      }
      lcd.setCursor(12, 1);
      lcd.print("   ");
      lcd.setCursor(12, 1);
      lcd.print(diametroRueda);
      delay(500);
    } else if (btn_push == 'S') {
      // Guardar configuración del diámetro de la rueda
      // Aquí puedes agregar el código para guardar la configuración
      // Por ahora solo lo mostramos en pantalla
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Diametro guardado");
      diametroRueda=diametroRueda;
      delay(500);
      MainMenu();
      break;
    }
  }
}

void Reloj() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Editar Reloj");

  lcd.setCursor(0, 1);
  lcd.print("> Hora: ");
  if(hora>23){
    hora=0;
    minutos=0;
  }
    if (hora<10){
      lcd.print("0");

    }
  lcd.print(hora);

  lcd.print(":");
  if (minutos>59){
    hora++;
    minutos=0;
  }
  if (minutos < 10) {
    lcd.print("0");
  }
  lcd.print(minutos);

  while (true) {
    btn_push = ReadKeypad();

    if (btn_push == 'U') {
      if ( cursorY == 1) {
        hora++;
       if (hora>23)
        hora=0;
        lcd.setCursor(8, 1);
        if (hora<10)
          lcd.print("0");
          lcd.print(hora);
          delay(500);
      }
       else if (cursorY == 2) {
        minutos++;
       if (minutos>59)
        minutos=0;
        lcd.setCursor(11, 1);
        if (minutos<10)
          lcd.print("0");
          lcd.print(minutos);
          delay(500);      
      }
    } 
    
    else if (btn_push == 'D') {
      if (cursorY == 1) {
        hora--;
       if (hora<0)
        hora=23;
        lcd.setCursor(8, 1);
        if (hora<10)
          lcd.print("0");
          lcd.print(hora);
          delay(500);
      } else if (cursorY == 2) {
        minutos--;
       if (minutos<0)
        minutos=59;
        lcd.setCursor(0, 1);
        //lcd.print("Minutos:  ");
        lcd.setCursor(11, 1);
        if (minutos<10)
          lcd.print("0");
          lcd.print(minutos);
          delay(500);
          }

    } 
    
    else if (btn_push == 'R') {
      if (cursorY == 1) {
        cursorY = 2;
        lcd.setCursor(0, 2);
        lcd.print(">");
        lcd.setCursor(0, 1);
        lcd.print(" ");
      }
    }
    
    else if (btn_push == 'L') {
      if (cursorY == 2) {
        cursorY = 1;
        lcd.setCursor(0, 1);
        lcd.print(">");
        lcd.setCursor(0, 2);
        lcd.print(" ");
      }
    }
    
    else if (btn_push == 'S') {
      // Guardar la hora y minutos
      // Aquí puedes agregar el código para guardar la configuración
      // Por ahora solo lo mostramos en pantalla
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Reloj guardado");
      delay(1000);
      MainMenu();
      break;
    
    }
     Estado = MENU;
  }
}

void fDistancia(){
  Pulsos    = Revoluciones();
  Velocidad = M_Velocidad(Pulsos);
  DistanciaTotal=M_Distancia(Velocidad);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Distancia ");
  lcd.clear();
  lcd.setCursor(0, 1);
  lcd.print("Recorrida");
  lcd.clear();
  lcd.setCursor(10, 1);
    if (DistanciaTotal >=1000){
      DistanciaTotal=DistanciaTotal/1000;
      a = 1;
    }
    lcd.setCursor(0, 1);
    lcd.print("Distancia: ");
    lcd.setCursor(10,1);
    lcd.print(DistanciaTotal);
    if(a==0){
      lcd.print("M");
    }else{
      lcd.print("Km");
    }
    Estado = MENU;
}

void fVelocidad(){
  while (b==0){
  Pulsos=Revoluciones();
  Velocidad=M_Velocidad(Pulsos);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("velocidad:");
  lcd.print(Velocidad);
  lcd.print("Km/h");
  lcd.setCursor(0, 1);
  lcd.print("R para Mph");
  btn_push = ReadKeypad();
  if (btn_push == 'R') {
    b = 1;
    }
        Estado=MENU;
  }
   while (b==1){
     Revoluciones();
     Velocidad= M_Velocidad(Pulsos);
     Velocidad_MPH = Velocidad_A_MPH(Velocidad);
       lcd.clear();
       lcd.setCursor(0, 0);
       lcd.print("velocidad:");
       lcd.print(Velocidad_MPH);
       lcd.print("M/h");
       lcd.setCursor(0, 1);
       lcd.print("R para Km/h");
       lcd.print("L para Menu");
       

     btn_push = ReadKeypad();
     if (btn_push == 'L') {
       b = 0;
      }
     else if (btn_push =='U'){
       b = 0;
       MainMenu();
       Estado= MENU;
       
     }
    }
}
void fVelocidadprom(){
   while (c==0){
    Pulsos    = Revoluciones();
    Velocidad = M_Velocidad(Pulsos);
    VelocidadPromedio = M_Vel_Promedio(DistanciaTotal);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("vel prom:");
    lcd.print(VelocidadPromedio);
    lcd.print("Km/h");
    lcd.setCursor(0, 1);
    lcd.print("pulse > para Mph");
    btn_push = ReadKeypad();
    if (btn_push == 'R') {
    c = 1;
      }
    }
     while (c==1){
       Revoluciones();
        Pulsos = M_Velocidad(Pulsos);
        VelocidadPromedio = M_Vel_Promedio(DistanciaTotal);
       Velocidad_Maxima_MPH(VelocidadPromedio);
         lcd.clear();
         lcd.setCursor(0, 0);
         lcd.print("vel prom:");
         lcd.print(VelocidadMaxima_MPH);
         lcd.print("M/h");
         lcd.setCursor(0, 1);
         lcd.print("pulse > para Km/h");
       btn_push = ReadKeypad();
       
       if (btn_push == 'R') {
       c = 0;
        }
      }
      Estado = MENU;
}
